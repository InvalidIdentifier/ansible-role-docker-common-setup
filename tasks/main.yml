---
# install essential packages for docker setup
- name: install required packages
  apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present

# create a directory to store the gpg keys for docker and ctop
- name: create directory for gpg keys
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /etc/apt/keyrings
    - /usr/share/keyrings/

# download docker's gpg key for repository verification
- name: download docker official gpg key
  get_url:
    url: https://download.docker.com/linux/debian/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'

# add docker repository to apt sources
- name: add docker apt repository
  shell: |
    CODENAME=$(lsb_release -cs)
    if [[ "$CODENAME" == "testing" ]]; then CODENAME="bookworm"; fi
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $CODENAME stable" > /etc/apt/sources.list.d/docker.list
  args:
    creates: /etc/apt/sources.list.d/docker.list

# get gpg key for ctop
- name: download azlux gpg key
  ansible.builtin.shell: |
    curl -fsSL https://azlux.fr/repo.gpg.key | gpg --dearmor -o /usr/share/keyrings/azlux-archive-keyring.gpg
  args:
    creates: /usr/share/keyrings/azlux-archive-keyring.gpg

# add repo for ctop
- name: add azlux repository
  shell: |
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/azlux-archive-keyring.gpg] http://packages.azlux.fr/debian \
      $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/azlux.list >/dev/null

# update apt cache to reflect the newly added docker repository
- name: update apt package index again
  apt:
    update_cache: yes

# install docker engine, cli, containerd and plugins
- name: install docker engine, cli, containerd and plugins
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      - docker-ctop
    state: present

# ensure docker service is running and enabled
- name: ensure docker service is running and enabled
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes
  when: 
    - ansible_virtualization_type != "docker"

# ensure group docker exists
- name: ensure group docker exists
  ansible.builtin.group:
    name: docker
    state: present

# add user to docker group
- name: add user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  when: 
    - ansible_virtualization_type != "docker"

# create an alias for docker ps command
- name: alias dops
  lineinfile:
    path: /home/user/.bashrc
    line: "{% raw %}alias dops='docker ps --format \"table {{.ID}}\\t{{.Names}}\\t{{.RunningFor}}\\t{{.Status}}\\t{{.State}}\"'{% endraw %}"
    state: present
  when: 
    - ansible_virtualization_type != "docker"

# check if bindmount directory exists
- name: check if bindmount directory exists
  stat:
    path: "{{ bindmount_dir }}"
  register: docker_dir_check

# create new bindmount directory if necessary
- name: create new bindmount directory if necessary
  file:
    path: "{{ bindmount_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

# check if docker network already exists
- name: check if docker network already exists
  command: >
    {% raw %}docker network ls --filter name=^web$ --format '{{.Name}}'{% endraw %}
  register: docker_network_check
  changed_when: false
  failed_when: false

- name: set fact if docker network exists
  set_fact:
    docker_network_exists: "{{ 'web' in docker_network_check.stdout_lines }}"

# create docker network
- name: create docker network
  command: >
    docker network create "web" --driver=bridge --subnet "172.21.0.0/16" --gateway "172.21.0.1"
  when: 
    - ansible_virtualization_type != "docker"
    - not docker_network_exists
...
