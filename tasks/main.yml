---
# install essential packages for docker setup
- name: install required packages
  apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present

# create a directory to store the Docker GPG key
- name: create directory for apt keyrings
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

# download Docker's GPG key for repository verification
- name: download docker official gpg key
  get_url:
    url: https://download.docker.com/linux/debian/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'

# add Docker repository to apt sources
- name: add docker apt repository
  shell: |
    CODENAME=$(lsb_release -cs)
    if [[ "$CODENAME" == "testing" ]]; then CODENAME="bookworm"; fi
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $CODENAME stable" > /etc/apt/sources.list.d/docker.list
  args:
    creates: /etc/apt/sources.list.d/docker.list

# update apt cache to reflect the newly added docker repository
- name: update apt package index again
  apt:
    update_cache: yes

# install docker engine, cli, containerd and plugins
- name: install docker engine, cli, containerd and plugins
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present

# ensure docker service is running and enabled
- name: ensure docker service is running and enabled
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes
  when: 
    - ansible_virtualization_type != "docker"

# ensure group docker exists
- name: ensure group docker exists
  ansible.builtin.group:
    name: docker
    state: present

# add user to docker group
- name: add user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  when: 
    - ansible_virtualization_type != "docker"

# create an alias for docker ps command
- name: alias dops
  lineinfile:
    path: /home/user/.bashrc
    line: "{% raw %}alias dops='docker ps --format \"table {{.ID}}\\t{{.Names}}\\t{{.RunningFor}}\\t{{.Status}}\\t{{.State}}\"'{% endraw %}"
    state: present
  when: 
    - ansible_virtualization_type != "docker"

# get current docker directory
- name: get current docker dir
  command: >
    {% raw %}docker info --format '{{.DockerRootDir}}'{% endraw %}
  register: current_docker_dir
  failed_when: false
  changed_when: false

# check if new docker directory exists
- name: check if new docker directory exists
  stat:
    path: "{{ new_docker_dir }}"
  register: docker_dir_check

# create new docker directory if necessary
- name: create new docker directory if necessary
  file:
    path: "{{ new_docker_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  when:
    - current_docker_dir.stdout != new_docker_dir

# stop docker service if directories need to be moved
- name: stop docker service if directories need to be moved
  service:
    name: docker
    state: stopped
  when:
    - current_docker_dir.stdout != new_docker_dir

# update docker config if directories need to be moved
- name: update docker config if directories need to be moved
  template:
    src: templates/daemon.json.j2
    dest: "{{ docker_config_file }}"
  when:
    - current_docker_dir.stdout != new_docker_dir
    - ansible_virtualization_type != "docker"
  notify:
    - restart docker

# check if old docker directory is empty
- name: check if old docker directory is empty
  find:
    paths: /var/lib/docker/
    file_type: any
  register: old_docker_files
  when:
    - current_docker_dir.stdout != new_docker_dir

# move docker data if necessary
- name: move docker data if necessary
  command: rsync -a /var/lib/docker/ "{{ new_docker_dir }}/"
  when:
    - current_docker_dir.stdout != new_docker_dir
    - old_docker_files.matched > 0
  ignore_errors: yes

# check if bindmount directory exists
- name: check if bindmount directory exists
  stat:
    path: "{{ bindmount_dir }}"
  register: docker_dir_check

# create new bindmount directory if necessary
- name: create new bindmount directory if necessary
  file:
    path: "{{ bindmount_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

# check if docker network already exists
- name: check if docker network already exists
  command: >
    {% raw %}docker network ls --filter name=^web$ --format '{{.Name}}'{% endraw %}
  register: docker_network_check
  changed_when: false
  failed_when: false

- name: set fact if docker network exists
  set_fact:
    docker_network_exists: "{{ docker_network_check.stdout == 'web' }}"

# create docker network
- name: create docker network
  command: >
    docker network create "web" --driver=bridge --subnet "172.21.0.0/16" --gateway "172.21.0.1"
  when: 
    - ansible_virtualization_type != "docker"
...
